// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  full_name           String
  username            String       @unique
  email               String       @unique
  phone_number        String?
  password            String
  profile_picture     String?
  role                Role         @default(USER)
  is_verified         Boolean      @default(false)
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  last_known_location Json?
  vehicle_type        VehicleType?

  identity             Identity?
  verification_updates VerificationRequest[] @relation("UpdatedByUser")
  tokens               Token[]
  wallet               Wallet?
  transactions         Transaction[]
  bookings             Booking[]
  drives               Booking[]             @relation("DriverBookings")

  @@map("users")
}

model Identity {
  id         Int                @id @default(autoincrement())
  user_id    Int                @unique
  type       IdentificationType @default(NONE)
  url        String
  file_path  String
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  user    User                 @relation(fields: [user_id], references: [id])
  request VerificationRequest?

  @@map("identities")
}

model VerificationRequest {
  id          Int      @id @default(autoincrement())
  updated_by  Int?
  identity_id Int      @unique
  status      Status   @default(PENDING)
  reason      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  updated_by_user User?     @relation("UpdatedByUser", fields: [updated_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  identity        Identity? @relation(fields: [identity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("verification_requests")
}

model Token {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  type       String
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("tokens")
}

model Wallet {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  balance    Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("wallets")
}

model Transaction {
  id         Int      @id @default(autoincrement())
  user_id    Int
  amount     Float
  type       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  booking Booking?

  @@map("transactions")
}

model Booking {
  id              Int           @id @default(autoincrement())
  user_id         Int
  driver_id       Int?
  mode_of_payment PaymentMode
  vehicle_type    VehicleType
  transaction_id  Int?          @unique
  fare            Float
  note            String?
  location_from   Json          @map("from")
  location_to     Json          @map("to")
  status          BookingStatus @default(PENDING)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction Transaction? @relation(fields: [transaction_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  driver      User?        @relation("DriverBookings", fields: [driver_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  history     RideHistory?

  @@map("bookings")
}

model RideHistory {
  id         Int      @id @default(autoincrement())
  booking_id Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("ride_histories")
}

enum Role {
  USER   @map("user")
  ADMIN  @map("admin")
  DRIVER @map("driver")
}

enum Status {
  PENDING   @map("pending")
  APPROVED  @map("approved")
  REJECTED  @map("rejected")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")
}

enum BookingStatus {
  PENDING   @map("pending")
  PICKED_UP @map("picked_up")
  DROPPED   @map("dropped")
  PICKING   @map("picking")
  ACCEPTED  @map("accepted")
  REJECTED  @map("rejected")
  CANCELLED @map("cancelled")
}

enum IdentificationType {
  NONE    @map("none")
  STUDENT @map("student")
  PWD     @map("pwd")
  SENIOR  @map("senior")
  DRIVER  @map("driver")
}

enum PaymentMode {
  CASH   @map("cash")
  WALLET @map("wallet")
}

enum VehicleType {
  EMC        @map("emc")
  ECART      @map("ecart")
  MOTORCYCLE @map("motorcycle")
  TRICYCLE   @map("tricycle")
}
